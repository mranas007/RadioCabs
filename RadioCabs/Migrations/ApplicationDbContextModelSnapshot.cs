// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RadioCabs.Data;

#nullable disable

namespace RadioCabs.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RadioCabs.Models.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Advertisements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Tech Street",
                            CompanyId = 1,
                            Description = "Leading cab service provider",
                            Designation = "Cab Services",
                            Mobile = "1234567890",
                            Title = "Tech Solutions Cab Ad"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Health Ave",
                            CompanyId = 2,
                            Description = "Comprehensive cab services",
                            Designation = "Cab Services",
                            Mobile = "2345678901",
                            Title = "HealthCare Inc. Cab Ad"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Edu Lane",
                            CompanyId = 3,
                            Description = "Innovative cab solutions",
                            Designation = "Cab Services",
                            Mobile = "3456789012",
                            Title = "EduWorld Cab Ad"
                        },
                        new
                        {
                            Id = 4,
                            Address = "101 Finance Blvd",
                            CompanyId = 4,
                            Description = "Expert cab services",
                            Designation = "Cab Services",
                            Mobile = "4567890123",
                            Title = "Finance Corp Cab Ad"
                        },
                        new
                        {
                            Id = 5,
                            Address = "202 Retail Road",
                            CompanyId = 5,
                            Description = "Top cab services",
                            Designation = "Cab Services",
                            Mobile = "5678901234",
                            Title = "RetailMart Cab Ad"
                        },
                        new
                        {
                            Id = 6,
                            Address = "303 Auto Drive",
                            CompanyId = 6,
                            Description = "Reliable cab services",
                            Designation = "Cab Services",
                            Mobile = "6789012345",
                            Title = "AutoWorks Cab Ad"
                        },
                        new
                        {
                            Id = 7,
                            Address = "404 Food Street",
                            CompanyId = 7,
                            Description = "Delicious cab services",
                            Designation = "Cab Services",
                            Mobile = "7890123456",
                            Title = "Foodies Cab Ad"
                        },
                        new
                        {
                            Id = 8,
                            Address = "505 Travel Blvd",
                            CompanyId = 8,
                            Description = "Exceptional cab services",
                            Designation = "Cab Services",
                            Mobile = "8901234567",
                            Title = "TravelCo Cab Ad"
                        },
                        new
                        {
                            Id = 9,
                            Address = "606 Media Lane",
                            CompanyId = 9,
                            Description = "Creative cab services",
                            Designation = "Cab Services",
                            Mobile = "9012345678",
                            Title = "MediaHouse Cab Ad"
                        },
                        new
                        {
                            Id = 10,
                            Address = "707 Build Ave",
                            CompanyId = 10,
                            Description = "Quality cab services",
                            Designation = "Cab Services",
                            Mobile = "1234567891",
                            Title = "BuildIt Cab Ad"
                        });
                });

            modelBuilder.Entity("RadioCabs.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("CompanyID")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Membership")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Tech Street",
                            CompanyID = 1234567890L,
                            CompanyName = "Tech Solutions",
                            Description = "Leading IT service provider",
                            Designation = "IT Services",
                            Membership = "Premium",
                            UserId = "user1"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Health Ave",
                            CompanyID = 2345678901L,
                            CompanyName = "HealthCare Inc.",
                            Description = "Comprehensive healthcare services",
                            Designation = "Healthcare Services",
                            Membership = "Basic",
                            UserId = "user2"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Edu Lane",
                            CompanyID = 3456789012L,
                            CompanyName = "EduWorld",
                            Description = "Innovative educational solutions",
                            Designation = "Educational Services",
                            Membership = "Free",
                            UserId = "user3"
                        },
                        new
                        {
                            Id = 4,
                            Address = "101 Finance Blvd",
                            CompanyID = 4567890123L,
                            CompanyName = "Finance Corp",
                            Description = "Expert financial services",
                            Designation = "Financial Services",
                            Membership = "Premium",
                            UserId = "user4"
                        },
                        new
                        {
                            Id = 5,
                            Address = "202 Retail Road",
                            CompanyID = 5678901234L,
                            CompanyName = "RetailMart",
                            Description = "Top retail services",
                            Designation = "Retail Services",
                            Membership = "Basic",
                            UserId = "user5"
                        },
                        new
                        {
                            Id = 6,
                            Address = "303 Auto Drive",
                            CompanyID = 6789012345L,
                            CompanyName = "AutoWorks",
                            Description = "Reliable automotive services",
                            Designation = "Automotive Services",
                            Membership = "Free",
                            UserId = "user6"
                        },
                        new
                        {
                            Id = 7,
                            Address = "404 Food Street",
                            CompanyID = 7890123456L,
                            CompanyName = "Foodies",
                            Description = "Delicious food services",
                            Designation = "Food Services",
                            Membership = "Premium",
                            UserId = "user7"
                        },
                        new
                        {
                            Id = 8,
                            Address = "505 Travel Blvd",
                            CompanyID = 8901234567L,
                            CompanyName = "TravelCo",
                            Description = "Exceptional travel services",
                            Designation = "Travel Services",
                            Membership = "Basic",
                            UserId = "user8"
                        },
                        new
                        {
                            Id = 9,
                            Address = "606 Media Lane",
                            CompanyID = 9012345678L,
                            CompanyName = "MediaHouse",
                            Description = "Creative media services",
                            Designation = "Media Services",
                            Membership = "Free",
                            UserId = "user9"
                        },
                        new
                        {
                            Id = 10,
                            Address = "707 Build Ave",
                            CompanyID = 1234567891L,
                            CompanyName = "BuildIt",
                            Description = "Quality construction services",
                            Designation = "Construction Services",
                            Membership = "Premium",
                            UserId = "user10"
                        });
                });

            modelBuilder.Entity("RadioCabs.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DriverID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Driver Street",
                            City = "Tech City",
                            ContactPerson = "Jane Doe",
                            Description = "Experienced and reliable driver",
                            DriverID = "D12345",
                            DriverName = "John Doe",
                            Experience = 5,
                            UserId = "user11"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Driver Ave",
                            City = "Health City",
                            ContactPerson = "Bob Smith",
                            Description = "Reliable and safe driver",
                            DriverID = "D23456",
                            DriverName = "Alice Smith",
                            Experience = 3,
                            UserId = "user12"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Driver Lane",
                            City = "Edu City",
                            ContactPerson = "Sarah Johnson",
                            Description = "Professional and skilled driver",
                            DriverID = "D34567",
                            DriverName = "Michael Johnson",
                            Experience = 7,
                            UserId = "user13"
                        },
                        new
                        {
                            Id = 4,
                            Address = "101 Driver Blvd",
                            City = "Finance City",
                            ContactPerson = "David Davis",
                            Description = "Skilled and courteous driver",
                            DriverID = "D45678",
                            DriverName = "Emily Davis",
                            Experience = 2,
                            UserId = "user14"
                        },
                        new
                        {
                            Id = 5,
                            Address = "202 Driver Road",
                            City = "Retail City",
                            ContactPerson = "Linda Brown",
                            Description = "Safe and experienced driver",
                            DriverID = "D56789",
                            DriverName = "James Brown",
                            Experience = 4,
                            UserId = "user15"
                        },
                        new
                        {
                            Id = 6,
                            Address = "303 Driver Drive",
                            City = "Auto City",
                            ContactPerson = "Robert Wilson",
                            Description = "Experienced and professional driver",
                            DriverID = "D67890",
                            DriverName = "Patricia Wilson",
                            Experience = 6,
                            UserId = "user16"
                        },
                        new
                        {
                            Id = 7,
                            Address = "404 Driver Street",
                            City = "Food City",
                            ContactPerson = "Laura Martinez",
                            Description = "Reliable and professional driver",
                            DriverID = "D78901",
                            DriverName = "Christopher Martinez",
                            Experience = 8,
                            UserId = "user17"
                        },
                        new
                        {
                            Id = 8,
                            Address = "505 Driver Blvd",
                            City = "Travel City",
                            ContactPerson = "Daniel Garcia",
                            Description = "Professional and courteous driver",
                            DriverID = "D89012",
                            DriverName = "Jessica Garcia",
                            Experience = 1,
                            UserId = "user18"
                        },
                        new
                        {
                            Id = 9,
                            Address = "606 Driver Lane",
                            City = "Media City",
                            ContactPerson = "Maria Rodriguez",
                            Description = "Skilled and experienced driver",
                            DriverID = "D90123",
                            DriverName = "David Rodriguez",
                            Experience = 9,
                            UserId = "user19"
                        });
                });

            modelBuilder.Entity("RadioCabs.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("RadioCabs.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("RadioCabs.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            FullName = "User One",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user1@example.com",
                            UserType = "Company"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            FullName = "User Two",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user2@example.com",
                            UserType = "Company"
                        },
                        new
                        {
                            Id = "user3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            FullName = "User Three",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user3@example.com",
                            UserType = "Company"
                        },
                        new
                        {
                            Id = "user4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            FullName = "User Four",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user4@example.com",
                            UserType = "Company"
                        },
                        new
                        {
                            Id = "user5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            FullName = "User Five",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user5@example.com",
                            UserType = "Company"
                        },
                        new
                        {
                            Id = "user6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user6@example.com",
                            EmailConfirmed = true,
                            FullName = "User Six",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER6@EXAMPLE.COM",
                            NormalizedUserName = "USER6@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user6@example.com",
                            UserType = "Company"
                        },
                        new
                        {
                            Id = "user7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user7@example.com",
                            EmailConfirmed = true,
                            FullName = "User Seven",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER7@EXAMPLE.COM",
                            NormalizedUserName = "USER7@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user7@example.com",
                            UserType = "Company"
                        },
                        new
                        {
                            Id = "user8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user8@example.com",
                            EmailConfirmed = true,
                            FullName = "User Eight",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER8@EXAMPLE.COM",
                            NormalizedUserName = "USER8@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user8@example.com",
                            UserType = "Company"
                        },
                        new
                        {
                            Id = "user9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user9@example.com",
                            EmailConfirmed = true,
                            FullName = "User Nine",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER9@EXAMPLE.COM",
                            NormalizedUserName = "USER9@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user9@example.com",
                            UserType = "Company"
                        },
                        new
                        {
                            Id = "user10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user10@example.com",
                            EmailConfirmed = true,
                            FullName = "User Ten",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER10@EXAMPLE.COM",
                            NormalizedUserName = "USER10@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user10@example.com",
                            UserType = "Company"
                        },
                        new
                        {
                            Id = "user11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user11@example.com",
                            EmailConfirmed = true,
                            FullName = "User Eleven",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER11@EXAMPLE.COM",
                            NormalizedUserName = "USER11@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user11@example.com",
                            UserType = "Driver"
                        },
                        new
                        {
                            Id = "user12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user12@example.com",
                            EmailConfirmed = true,
                            FullName = "User Twelve",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER12@EXAMPLE.COM",
                            NormalizedUserName = "USER12@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user12@example.com",
                            UserType = "Driver"
                        },
                        new
                        {
                            Id = "user13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user13@example.com",
                            EmailConfirmed = true,
                            FullName = "User Thirteen",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER13@EXAMPLE.COM",
                            NormalizedUserName = "USER13@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user13@example.com",
                            UserType = "Driver"
                        },
                        new
                        {
                            Id = "user14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user14@example.com",
                            EmailConfirmed = true,
                            FullName = "User Fourteen",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER14@EXAMPLE.COM",
                            NormalizedUserName = "USER14@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user14@example.com",
                            UserType = "Driver"
                        },
                        new
                        {
                            Id = "user15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user15@example.com",
                            EmailConfirmed = true,
                            FullName = "User Fifteen",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER15@EXAMPLE.COM",
                            NormalizedUserName = "USER15@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user15@example.com",
                            UserType = "Driver"
                        },
                        new
                        {
                            Id = "user16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user16@example.com",
                            EmailConfirmed = true,
                            FullName = "User Sixteen",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER16@EXAMPLE.COM",
                            NormalizedUserName = "USER16@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user16@example.com",
                            UserType = "Driver"
                        },
                        new
                        {
                            Id = "user17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user17@example.com",
                            EmailConfirmed = true,
                            FullName = "User Seventeen",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER17@EXAMPLE.COM",
                            NormalizedUserName = "USER17@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user17@example.com",
                            UserType = "Driver"
                        },
                        new
                        {
                            Id = "user18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user18@example.com",
                            EmailConfirmed = true,
                            FullName = "User Eighteen",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER18@EXAMPLE.COM",
                            NormalizedUserName = "USER18@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user18@example.com",
                            UserType = "Driver"
                        },
                        new
                        {
                            Id = "user19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ",
                            Email = "user19@example.com",
                            EmailConfirmed = true,
                            FullName = "User Nineteen",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER19@EXAMPLE.COM",
                            NormalizedUserName = "USER19@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAE...",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "XYZ",
                            TwoFactorEnabled = false,
                            UserName = "user19@example.com",
                            UserType = "Driver"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RadioCabs.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RadioCabs.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RadioCabs.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RadioCabs.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioCabs.Models.Advertisement", b =>
                {
                    b.HasOne("RadioCabs.Models.Company", "Company")
                        .WithMany("Advertisements")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RadioCabs.Models.Company", b =>
                {
                    b.HasOne("RadioCabs.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("RadioCabs.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RadioCabs.Models.Driver", b =>
                {
                    b.HasOne("RadioCabs.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RadioCabs.Models.Payment", b =>
                {
                    b.HasOne("RadioCabs.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RadioCabs.Models.Company", b =>
                {
                    b.Navigation("Advertisements");
                });

            modelBuilder.Entity("RadioCabs.Models.User", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
